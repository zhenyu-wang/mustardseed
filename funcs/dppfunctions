#! /bin/env bash

#----------------------------------------
# 功能：判断要导的表在sourceDB是否都存在
# 返回：存在：yes 不存在：no
# $1: db connection string
# $2: username
# $3: table name
#----------------------------------------

function isTableExist {
_conn_str=${1}
USERNAME=${2}
TABLENAME=${3}

IFEXIST=`sqlplus -S "${_conn_str}" << EOF
set heading off feedback off pagesize 0 verify off echo off
select count(table_name) from dba_tables where owner='${USERNAME}' and table_name='${TABLENAME}';
exit;
EOF`
if [ $IFEXIST -eq 0 ]; then
	echo "no"
else
   echo "yes"
fi
}

# truncate DB's tables
# 参数：
#	$1 database connection string
#	$2 username.tablename
function truncateTable {
(sqlplus -S "$1" << EOF
truncate table $2;
exit;
EOF
) | grep -i "Table truncated" > /dev/null 2>&1
if [ $? -eq 0 ]; then
	echo "yes"
else
   echo "no"
fi
}

# drop DB's tables
# 参数：
#	$1 database connection string
#	$2 username.tablename
function dropTable {
(sqlplus -S "$1" << EOF
drop table $2 purge;
exit;
EOF
) | grep -i "Table dropped" > /dev/null 2>&1
if [ $? -ne 0 ]; then
	echo "failed"
else
   echo "succeeded"
fi
}

#----------------------------
# 功能：检查数据库是否可以连接成功
# 返回：成功返回yes，不成功返回no
# $1: db connection string
#----------------------------
function checkDBConnection {
(sqlplus -S "$1" << EOF
select status from v\$instance;
exit;
EOF
) | grep OPEN > /dev/null 2>&1
if [ $? -eq 0 ]; then
	echo "yes"
else
   echo "no"
fi
}

# Description: mknod pipe file for tables on OCM
# parameters: 
# $1: pipe file name
# $2: 创建pipe文件的路径
function makePipe(){
   rm -rf ${2}/$1
   mknod ${2}/$1 p
}

#-----------------------------------------------
# 功能：根据表名导入表数据,暂不支持表名的映射
# $1: 用户名
# $2: 表名
# $3: 映射用户名
# $4: 映射表名
# $5: 工作路径
# $6: 数据库连接串
#-----------------------------------------------
function ImpDataByTable(){
	username=$1
	tablename=$2
	tousername=$3
   # 清理导入日志
   rm -rf ${5}/log/imp.${username}.${tablename}.log
   # 生成并执行入脚本
	echo "nohup imp ${6} commit=y ignore=y file=${5}/pipe/${username}.${tablename} fromuser=${username} touser=${tousername} buffer=1024000000 log=${5}/log/imp.${username}.${tablename}.log > /dev/null 2>&1 &"
	eval "nohup imp ${6} commit=y ignore=y file=${5}/pipe/${username}.${tablename} fromuser=${username} touser=${tousername} buffer=1002400000  log=${5}/log/imp.${username}.${tablename}.log > /dev/null 2>&1 &"
}

#------------------------------------------------------
# 功能：获取数据scn号，并返回
# 返回：scn号
# $1：数据库连接串
#------------------------------------------------------
function getCurrentScn(){
CONNSTR=${1}
CURRENT_SCN=`sqlplus -S "$CONNSTR" << EOF
set heading off feedback off pagesize 0 verify off echo off
select to_char(current_scn,'999999999999999999') from v\\$database;
exit;
EOF`
echo $(($CURRENT_SCN))
}

#-----------------------------------------------
# 功能: 根据单表名执行导出
# $1: 用户名
# $2: 表名
# $3: scn参数串，当没有使用--witchscn时，为null
# $4: 工作目录
# $5: 数据库连接串
#-----------------------------------------------
function expDataByTable(){
	username=$1
	tablename=$2
   # 如果传递的值为null，则替换为""值
	scn_para=${3%null}
	rm -rf ${4}/log/exp.${username}.${tablename}.log
	echo "nohup exp ${5} rows=y ${scn_para} CONSTRAINTS=n STATISTICS=none TRIGGERS=n GRANTS=n indexes=n tables=${username}.${tablename} log=${4}/log/exp.${username}.${tablename}.log file=${4}/pipe/${username}.${tablename} > /dev/null 2>&1 &"
	eval "nohup exp ${5} rows=y ${scn_para} CONSTRAINTS=n STATISTICS=none TRIGGERS=n GRANTS=n indexes=n tables=${username}.${tablename} log=${4}/log/exp.${username}.${tablename}.log file=${4}/pipe/${username}.${tablename} > /dev/null 2>&1 &"
}

# 获取DPP当前工作进程状态和日志状态
function getDDPStatus(){
# 正在exp进程
for pexp in $(ps -ef|grep exp|grep -v grep|awk -F' ' '{print $19}'|awk -F/ '{print $5}')
do

# 成功exp进程
echo "getDDPStatus"
# 异常exp进程

done
}

#--------------------------------------------------------
# 功能：根据表名从DB中统计表的大小
# 返回：表大小 MB
# $1: connection string
# $2: user
# $3: table
#--------------------------------------------------------

#--------------------------------------------------------
# 功能：根据表空间名,从DB中统计表空间剩余的大小
# 返回：大小 MB
# $1: connection string
# $2: tbs类型
# $3: tablespace name
#--------------------------------------------------------

#--------------------------------------------------------
# 功能：从DB中查询某一类型的对象是否存在
# 返回：存在：yes 不存在：no
# $1: connection string
# $2: 对象类型 as TALBESPACE
# $3: 对象名称 as TBSDATA
#--------------------------------------------------------
function isUserExist {
_conn_str=${1}
_OBJECT_TYPE=${2}
_OBJECT_NAME=${3}
IFEXIST=`sqlplus -S "${_conn_str}" << EOF
set heading off feedback off pagesize 0 verify off echo off
SELECT COUNT(${_OBJECT_TYPE}NAME) FROM DBA_${_OBJECT_TYPE}S WHERE ${_OBJECT_TYPE}NAME='${_OBJECT_NAME}';
exit;
EOF`
if [ $IFEXIST -eq 0 ]; then
	echo "no"
else
   echo "yes"
fi
}

#--------------------------------------------------------
# 功能：从DB中查询某一类型的对象是否存在
# 返回：存在：yes 不存在：no
# $1: connection string
# $2: 对象类型 as TALBESPACE
# $3: 对象名称 as TBSDATA
#--------------------------------------------------------
function isObjectExist {
_conn_str=${1}
_OBJECT_TYPE=${2}
_OBJECT_NAME=${3}
IFEXIST=`sqlplus -S "${_conn_str}" << EOF
set heading off feedback off pagesize 0 verify off echo off
SELECT COUNT(${_OBJECT_TYPE}_NAME) FROM DBA_${_OBJECT_TYPE}S WHERE ${_OBJECT_TYPE}_NAME='${_OBJECT_NAME}';
exit;
EOF`
if [ $IFEXIST -eq 0 ]; then
	echo "no"
else
   echo "yes"
fi
}

#--------------------------------------------------------
# 功能：从DB中获取创建对象的sql
# $1: connection string
# $2: owner
# $3: object_name 
# $4: 生成的sql文件名称
# $5: 是否需要生成tablespace子句，TRUE/FALSE
# $6: object_type
#--------------------------------------------------------
function genSQLCreate() {
_conn_str=$1
USERNAME=$2
TABLENAME=$3
_sqlfile=$4
_is_need_tbs=$5
_obj_type=$6
_is_need_tbs="TRUE"
sqlplus -S "${_conn_str}" << EOF
set echo off
set pagesize 0
set linesize 120
set long 900000
set longchunksize 120
set feedback off
set termout on
set echo off
set heading off
set verify off
--输出信息采用缩排或换行格式化
EXEC DBMS_METADATA.set_transform_param(DBMS_METADATA.session_transform, 'PRETTY', TRUE);
--确保每个语句都带分号
EXEC DBMS_METADATA.set_transform_param(DBMS_METADATA.session_transform, 'SQLTERMINATOR', TRUE);
--关闭表索引、外键等关联（后面单独生成）
EXEC DBMS_METADATA.set_transform_param(DBMS_METADATA.session_transform, 'CONSTRAINTS', FALSE);
EXEC DBMS_METADATA.set_transform_param(DBMS_METADATA.session_transform, 'REF_CONSTRAINTS', FALSE);
EXEC DBMS_METADATA.set_transform_param(DBMS_METADATA.session_transform, 'CONSTRAINTS_AS_ALTER', FALSE);
--关闭存储、表空间属性
EXEC DBMS_METADATA.set_transform_param(DBMS_METADATA.session_transform, 'STORAGE', FALSE);
EXEC DBMS_METADATA.set_transform_param(DBMS_METADATA.session_transform, 'TABLESPACE', ${_is_need_tbs});
--关闭创建表的PCTFREE、NOCOMPRESS等属性
EXEC DBMS_METADATA.set_transform_param(DBMS_METADATA.session_transform, 'SEGMENT_ATTRIBUTES', ${_is_need_tbs});
spool $_sqlfile
--导出表结构
select dbms_metadata.get_ddl('$_obj_type', '$TABLENAME', '$USERNAME') from dual;
spool off;
exit;
EOF
}
#--------------------------------------------------------
# 功能：根据已知表，从DB中获取其上的索引
# $1: connection string
# $2: user
# $3: table
# $4: object_type
#--------------------------------------------------------
function getIndexByTable(){
_CONNSTR=${1}
_owner=$2
_tab_name=$3
_obj_type=$4
_obj_name=`sqlplus -S "$_CONNSTR" << EOF
set heading off feedback off pagesize 0 verify off echo off
select ${_obj_type}_NAME from DBA_${_obj_type}es where owner='${_owner}' and TABLE_NAME='${_tab_name}' and status in('VALID','N/A');
exit;
EOF`
echo $_obj_name
}

#--------------------------------------------------------
# 功能：根据已知表，从DB中获取约束
# $1: connection string
# $2: user
# $3: table
# $4: object_type
#--------------------------------------------------------
function getConsByTable(){
_CONNSTR=${1}
_owner=$2
_tab_name=$3
_obj_type=$4
_obj_name=`sqlplus -S "$_CONNSTR" << EOF
set heading off feedback off pagesize 0 verify off echo off
select ${_obj_type}_NAME from DBA_${_obj_type}s where owner='${_owner}' and TABLE_NAME='${_tab_name}' and status in('ENABLED');
exit;
EOF`
echo $_obj_name
}

#--------------------------------------------------------
# 功能：根据username,tablename,tablespace name的映射关系, 对建表和建索引语句进行替换
# $1: sql file name
# $2: 替换类型：value: username/tablename/tbsname
# $3: 原值
# $4: 新值
#--------------------------------------------------------
function filterEditSQLScript(){
   _s_type=$2
   _s_file=$1
   # 如果原值为 %,则替换为 [a-zA-Z0-9_]+
   _fromval=`if [ "$3" == "%" ]; then echo '[a-zA-Z0-9_]+'; else echo $3; fi;`
   _toval=$4

   case "$_s_type" in
      username )
         sed -i "s/\"${_fromval}\"\./\"${_toval}\"\./g" $_s_file
         ;;
      tbsname )
         sed -ri "s/TABLESPACE +\"${_fromval}\"/TABLESPACE \"${_toval}\"/g" $_s_file
         ;;
   esac
}

#--------------------------------------------------------
# 功能：在DB中执行sql脚本
# 返回：succeeded / failed
# $1: connection string
# $2: sql文件名称
#--------------------------------------------------------
function executeSQLScript() {
(
sqlplus -S "$1" << EOF
set heading off feedback on pagesize 0 verify off echo on
@ '$2'
exit;
EOF
) | grep -i "ORA-" > /dev/null # 2>&1
if [ $? -eq 0 ]; then
	echo "failed"
else
	echo "succeeded"
fi
}
